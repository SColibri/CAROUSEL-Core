// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CarouselConfigurations.h"

namespace carousel
{
  namespace data
  {
    // DatabaseType
    //

    DatabaseType::
    DatabaseType (value v)
    : ::xml_schema::string (_xsd_DatabaseType_literals_[v])
    {
    }

    DatabaseType::
    DatabaseType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    DatabaseType::
    DatabaseType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    DatabaseType::
    DatabaseType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    DatabaseType::
    DatabaseType (const DatabaseType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    DatabaseType& DatabaseType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_DatabaseType_literals_[v]);

      return *this;
    }


    // CarouselConfiguration
    //

    const CarouselConfiguration::DatabaseConfiguration_type& CarouselConfiguration::
    DatabaseConfiguration () const
    {
      return this->DatabaseConfiguration_.get ();
    }

    CarouselConfiguration::DatabaseConfiguration_type& CarouselConfiguration::
    DatabaseConfiguration ()
    {
      return this->DatabaseConfiguration_.get ();
    }

    void CarouselConfiguration::
    DatabaseConfiguration (const DatabaseConfiguration_type& x)
    {
      this->DatabaseConfiguration_.set (x);
    }

    void CarouselConfiguration::
    DatabaseConfiguration (::std::unique_ptr< DatabaseConfiguration_type > x)
    {
      this->DatabaseConfiguration_.set (std::move (x));
    }


    // DatabaseConfiguration
    //

    const DatabaseConfiguration::selectedDatabase_type& DatabaseConfiguration::
    selectedDatabase () const
    {
      return this->selectedDatabase_.get ();
    }

    DatabaseConfiguration::selectedDatabase_type& DatabaseConfiguration::
    selectedDatabase ()
    {
      return this->selectedDatabase_.get ();
    }

    void DatabaseConfiguration::
    selectedDatabase (const selectedDatabase_type& x)
    {
      this->selectedDatabase_.set (x);
    }

    void DatabaseConfiguration::
    selectedDatabase (::std::unique_ptr< selectedDatabase_type > x)
    {
      this->selectedDatabase_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace carousel
{
  namespace data
  {
    // DatabaseType
    //

    DatabaseType::
    DatabaseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_DatabaseType_convert ();
    }

    DatabaseType::
    DatabaseType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_DatabaseType_convert ();
    }

    DatabaseType::
    DatabaseType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_DatabaseType_convert ();
    }

    DatabaseType* DatabaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DatabaseType (*this, f, c);
    }

    DatabaseType::value DatabaseType::
    _xsd_DatabaseType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DatabaseType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_DatabaseType_indexes_,
                        _xsd_DatabaseType_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_DatabaseType_indexes_ + 1 || _xsd_DatabaseType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const DatabaseType::
    _xsd_DatabaseType_literals_[1] =
    {
      "SQLite3"
    };

    const DatabaseType::value DatabaseType::
    _xsd_DatabaseType_indexes_[1] =
    {
      ::carousel::data::DatabaseType::SQLite3
    };

    // CarouselConfiguration
    //

    CarouselConfiguration::
    CarouselConfiguration (const DatabaseConfiguration_type& DatabaseConfiguration)
    : ::xml_schema::type (),
      DatabaseConfiguration_ (DatabaseConfiguration, this)
    {
    }

    CarouselConfiguration::
    CarouselConfiguration (::std::unique_ptr< DatabaseConfiguration_type > DatabaseConfiguration)
    : ::xml_schema::type (),
      DatabaseConfiguration_ (std::move (DatabaseConfiguration), this)
    {
    }

    CarouselConfiguration::
    CarouselConfiguration (const CarouselConfiguration& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DatabaseConfiguration_ (x.DatabaseConfiguration_, f, this)
    {
    }

    CarouselConfiguration::
    CarouselConfiguration (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DatabaseConfiguration_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void CarouselConfiguration::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DatabaseConfiguration
        //
        if (n.name () == "DatabaseConfiguration" && n.namespace_ () == "http://carousel.com/carousel/data")
        {
          ::std::unique_ptr< DatabaseConfiguration_type > r (
            DatabaseConfiguration_traits::create (i, f, this));

          if (!DatabaseConfiguration_.present ())
          {
            this->DatabaseConfiguration_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!DatabaseConfiguration_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DatabaseConfiguration",
          "http://carousel.com/carousel/data");
      }
    }

    CarouselConfiguration* CarouselConfiguration::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CarouselConfiguration (*this, f, c);
    }

    CarouselConfiguration& CarouselConfiguration::
    operator= (const CarouselConfiguration& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->DatabaseConfiguration_ = x.DatabaseConfiguration_;
      }

      return *this;
    }

    CarouselConfiguration::
    ~CarouselConfiguration ()
    {
    }

    bool
    operator== (const CarouselConfiguration& x, const CarouselConfiguration& y)
    {
      if (!(x.DatabaseConfiguration () == y.DatabaseConfiguration ()))
        return false;

      return true;
    }

    bool
    operator!= (const CarouselConfiguration& x, const CarouselConfiguration& y)
    {
      return !(x == y);
    }

    // DatabaseConfiguration
    //

    DatabaseConfiguration::
    DatabaseConfiguration (const selectedDatabase_type& selectedDatabase)
    : ::xml_schema::type (),
      selectedDatabase_ (selectedDatabase, this)
    {
    }

    DatabaseConfiguration::
    DatabaseConfiguration (const DatabaseConfiguration& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      selectedDatabase_ (x.selectedDatabase_, f, this)
    {
    }

    DatabaseConfiguration::
    DatabaseConfiguration (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      selectedDatabase_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void DatabaseConfiguration::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // selectedDatabase
        //
        if (n.name () == "selectedDatabase" && n.namespace_ () == "http://carousel.com/carousel/data")
        {
          ::std::unique_ptr< selectedDatabase_type > r (
            selectedDatabase_traits::create (i, f, this));

          if (!selectedDatabase_.present ())
          {
            this->selectedDatabase_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!selectedDatabase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "selectedDatabase",
          "http://carousel.com/carousel/data");
      }
    }

    DatabaseConfiguration* DatabaseConfiguration::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DatabaseConfiguration (*this, f, c);
    }

    DatabaseConfiguration& DatabaseConfiguration::
    operator= (const DatabaseConfiguration& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->selectedDatabase_ = x.selectedDatabase_;
      }

      return *this;
    }

    DatabaseConfiguration::
    ~DatabaseConfiguration ()
    {
    }

    bool
    operator== (const DatabaseConfiguration& x, const DatabaseConfiguration& y)
    {
      if (!(x.selectedDatabase () == y.selectedDatabase ()))
        return false;

      return true;
    }

    bool
    operator!= (const DatabaseConfiguration& x, const DatabaseConfiguration& y)
    {
      return !(x == y);
    }
  }
}

#include <ostream>

namespace carousel
{
  namespace data
  {
    ::std::ostream&
    operator<< (::std::ostream& o, DatabaseType::value i)
    {
      return o << DatabaseType::_xsd_DatabaseType_literals_[i];
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const DatabaseType& i)
    {
      return o << static_cast< const ::xml_schema::string& > (i);
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const CarouselConfiguration& i)
    {
      o << ::std::endl << "DatabaseConfiguration: " << i.DatabaseConfiguration ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const DatabaseConfiguration& i)
    {
      o << ::std::endl << "selectedDatabase: " << i.selectedDatabase ();
      return o;
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace carousel
{
  namespace data
  {
    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
        ::carousel::data::CarouselConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
        ::carousel::data::CarouselConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
        ::carousel::data::CarouselConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::carousel::data::CarouselConfiguration_ (isrc, f, p);
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::carousel::data::CarouselConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::carousel::data::CarouselConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::carousel::data::CarouselConfiguration_ (isrc, f, p);
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::carousel::data::CarouselConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::carousel::data::CarouselConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
        ::carousel::data::CarouselConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
        ::carousel::data::CarouselConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
        ::carousel::data::CarouselConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::carousel::data::CarouselConfiguration > (
          ::carousel::data::CarouselConfiguration_ (
            std::move (d), f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CarouselConfiguration" &&
          n.namespace_ () == "http://carousel.com/carousel/data")
      {
        ::std::unique_ptr< ::carousel::data::CarouselConfiguration > r (
          ::xsd::cxx::tree::traits< ::carousel::data::CarouselConfiguration, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CarouselConfiguration",
        "http://carousel.com/carousel/data");
    }

    ::std::unique_ptr< ::carousel::data::CarouselConfiguration >
    CarouselConfiguration_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CarouselConfiguration" &&
          n.namespace_ () == "http://carousel.com/carousel/data")
      {
        ::std::unique_ptr< ::carousel::data::CarouselConfiguration > r (
          ::xsd::cxx::tree::traits< ::carousel::data::CarouselConfiguration, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CarouselConfiguration",
        "http://carousel.com/carousel/data");
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
        ::carousel::data::DatabaseConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
        ::carousel::data::DatabaseConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
        ::carousel::data::DatabaseConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::carousel::data::DatabaseConfiguration_ (isrc, f, p);
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::carousel::data::DatabaseConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::carousel::data::DatabaseConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::carousel::data::DatabaseConfiguration_ (isrc, f, p);
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::carousel::data::DatabaseConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::carousel::data::DatabaseConfiguration_ (isrc, h, f, p);
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
        ::carousel::data::DatabaseConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
        ::carousel::data::DatabaseConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
        ::carousel::data::DatabaseConfiguration_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > (
          ::carousel::data::DatabaseConfiguration_ (
            std::move (d), f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DatabaseConfiguration" &&
          n.namespace_ () == "http://carousel.com/carousel/data")
      {
        ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > r (
          ::xsd::cxx::tree::traits< ::carousel::data::DatabaseConfiguration, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DatabaseConfiguration",
        "http://carousel.com/carousel/data");
    }

    ::std::unique_ptr< ::carousel::data::DatabaseConfiguration >
    DatabaseConfiguration_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DatabaseConfiguration" &&
          n.namespace_ () == "http://carousel.com/carousel/data")
      {
        ::std::unique_ptr< ::carousel::data::DatabaseConfiguration > r (
          ::xsd::cxx::tree::traits< ::carousel::data::DatabaseConfiguration, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DatabaseConfiguration",
        "http://carousel.com/carousel/data");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace carousel
{
  namespace data
  {
    void
    CarouselConfiguration_ (::std::ostream& o,
                            const ::carousel::data::CarouselConfiguration& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::CarouselConfiguration_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    CarouselConfiguration_ (::std::ostream& o,
                            const ::carousel::data::CarouselConfiguration& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::CarouselConfiguration_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CarouselConfiguration_ (::std::ostream& o,
                            const ::carousel::data::CarouselConfiguration& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::CarouselConfiguration_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CarouselConfiguration_ (::xercesc::XMLFormatTarget& t,
                            const ::carousel::data::CarouselConfiguration& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::CarouselConfiguration_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    CarouselConfiguration_ (::xercesc::XMLFormatTarget& t,
                            const ::carousel::data::CarouselConfiguration& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::CarouselConfiguration_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CarouselConfiguration_ (::xercesc::XMLFormatTarget& t,
                            const ::carousel::data::CarouselConfiguration& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::CarouselConfiguration_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    CarouselConfiguration_ (::xercesc::DOMDocument& d,
                            const ::carousel::data::CarouselConfiguration& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CarouselConfiguration" &&
          n.namespace_ () == "http://carousel.com/carousel/data")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CarouselConfiguration",
          "http://carousel.com/carousel/data");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    CarouselConfiguration_ (const ::carousel::data::CarouselConfiguration& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CarouselConfiguration",
          "http://carousel.com/carousel/data",
          m, f));

      ::carousel::data::CarouselConfiguration_ (*d, s, f);
      return d;
    }

    void
    DatabaseConfiguration_ (::std::ostream& o,
                            const ::carousel::data::DatabaseConfiguration& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::DatabaseConfiguration_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    DatabaseConfiguration_ (::std::ostream& o,
                            const ::carousel::data::DatabaseConfiguration& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::DatabaseConfiguration_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DatabaseConfiguration_ (::std::ostream& o,
                            const ::carousel::data::DatabaseConfiguration& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::DatabaseConfiguration_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DatabaseConfiguration_ (::xercesc::XMLFormatTarget& t,
                            const ::carousel::data::DatabaseConfiguration& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::DatabaseConfiguration_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    DatabaseConfiguration_ (::xercesc::XMLFormatTarget& t,
                            const ::carousel::data::DatabaseConfiguration& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::DatabaseConfiguration_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DatabaseConfiguration_ (::xercesc::XMLFormatTarget& t,
                            const ::carousel::data::DatabaseConfiguration& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::carousel::data::DatabaseConfiguration_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DatabaseConfiguration_ (::xercesc::DOMDocument& d,
                            const ::carousel::data::DatabaseConfiguration& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DatabaseConfiguration" &&
          n.namespace_ () == "http://carousel.com/carousel/data")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DatabaseConfiguration",
          "http://carousel.com/carousel/data");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    DatabaseConfiguration_ (const ::carousel::data::DatabaseConfiguration& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DatabaseConfiguration",
          "http://carousel.com/carousel/data",
          m, f));

      ::carousel::data::DatabaseConfiguration_ (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const DatabaseType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const DatabaseType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const DatabaseType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const CarouselConfiguration& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DatabaseConfiguration
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "DatabaseConfiguration",
            "http://carousel.com/carousel/data",
            e));

        s << i.DatabaseConfiguration ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const DatabaseConfiguration& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // selectedDatabase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "selectedDatabase",
            "http://carousel.com/carousel/data",
            e));

        s << i.selectedDatabase ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

